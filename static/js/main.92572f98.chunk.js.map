{"version":3,"sources":["components/ItemForm.js","components/ShiftButtons.js","components/DeleteButton.js","components/CheckBox.js","components/ListItem.js","components/DisplayList.js","App.js","index.js"],"names":["ItemForm","props","onSubmit","event","preventDefault","target","task","value","newList","todoList","slice","date","Date","fullDate","getMonth","getDate","getFullYear","length","id","now","complete","update","className","type","name","placeholder","maxLength","autoComplete","ShiftButtons","upButton","downButton","moveEvent","index","findIndex","listItem","toString","swap","itemIndex","onClick","title","DeleteButton","splice","CheckBox","ListItem","i","index1","index2","item1","item2","draggable","onDragStart","dataTransfer","setData","onDragOver","onDrop","getData","DisplayList","list","map","item","key","undefined","App","localStorage","setItem","JSON","stringify","setState","state","parse","getItem","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92572f98.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\nfunction ItemForm(props) {\r\n  const handleForm = (event) => {\r\n    event.preventDefault();\r\n    if(event.target.task.value !== \"\") {\r\n      let newList = props.todoList.slice();\r\n      const date = new Date();\r\n      const fullDate = (date.getMonth() + 1) + \"-\" + date.getDate() + \"-\" + date.getFullYear();\r\n      newList[newList.length] = {task: event.target.task.value, id: Date.now(), complete: false, date: fullDate};\r\n      event.target.task.value = \"\";\r\n      props.update(newList);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <form onSubmit={handleForm} className=\"itemForm\">\r\n      <input type=\"text\" name=\"task\" className=\"item\" placeholder=\"Add item to list...\" maxLength=\"250\" autoComplete=\"off\"/>\r\n      <input type=\"submit\" value=\"Submit\" className=\"submitButton\"/>\r\n    </form>\r\n  );\r\n}\r\n\r\nItemForm.propTypes = {\r\n  update: PropTypes.func.isRequired,\r\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default ItemForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\nfunction ShiftButtons(props) {\r\n    const moveEvent = (event) => {\r\n        const index = props.findIndex(props.listItem.id.toString());\r\n        let newList;\r\n        event.target.name === \"Up\" ? newList = props.swap(index, index - 1) : newList = props.swap(index, index + 1);\r\n        props.update(newList);\r\n    }\r\n\r\n    const itemIndex = props.findIndex(props.listItem.id.toString());\r\n    let upButton;\r\n    let downButton;\r\n    \r\n    if(itemIndex !== 0)\r\n        upButton = <button onClick={moveEvent} name=\"Up\" title=\"Move Item Up\" className=\"arrows\">&#8593;</button>\r\n    if(itemIndex !== props.todoList.length - 1)\r\n        downButton = <button onClick={moveEvent} name=\"Down\" title=\"Move Item Down\" className=\"arrows\">&darr;</button>\r\n\r\n    return(\r\n        <div className=\"arrowButtons\">\r\n            {upButton}\r\n            {downButton}\r\n        </div>\r\n    );\r\n}\r\n\r\nShiftButtons.propTypes = {\r\n    update: PropTypes.func.isRequired,\r\n    findIndex: PropTypes.func.isRequired,\r\n    listItem: PropTypes.object.isRequired,\r\n    todoList: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default ShiftButtons;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\nfunction DeleteButton(props) {\r\n    const deleteItem = (event) => {\r\n        const index = props.findIndex(event.target.name);\r\n        \r\n        let newList = props.todoList.slice();\r\n        newList.splice(index, 1);\r\n        props.update(newList);\r\n    }\r\n\r\n    return(\r\n        <div className=\"listButton\">\r\n            <button onClick={deleteItem} name={props.listItem.id} title=\"Delete List Item\">X</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nDeleteButton.propTypes = {\r\n    update: PropTypes.func.isRequired,\r\n    findIndex: PropTypes.func.isRequired,\r\n    listItem: PropTypes.object.isRequired,\r\n    todoList: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default DeleteButton;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\nfunction CheckBox(props) {\r\n    const handleCheck = (event) => {\r\n        const index = props.findIndex(event.target.name);\r\n    \r\n        let newList = props.todoList.slice();\r\n        !newList[index].complete ? newList[index].complete = true : newList[index].complete = false;\r\n        props.update(newList);\r\n    }\r\n\r\n    return(\r\n        <div className=\"completeButton\">\r\n            <input type=\"checkbox\" title=\"Mark as Done\" onClick={handleCheck} name={props.listItem.id} className=\"check\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nCheckBox.propTypes = {\r\n    update: PropTypes.func.isRequired,\r\n    findIndex: PropTypes.func.isRequired,\r\n    listItem: PropTypes.object.isRequired,\r\n    todoList: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default CheckBox;","import React from 'react';\r\nimport ShiftButtons from './ShiftButtons';\r\nimport DeleteButton from './DeleteButton';\r\nimport CheckBox from './CheckBox';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\nfunction ListItem(props) {\r\n    const findIndex = (id) => {\r\n        for(let i = 0; i < props.todoList.length; i++){\r\n            if(id === props.todoList[i].id.toString()){\r\n              id = i;\r\n              break;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n\r\n    const swap = (index1, index2) => {\r\n        let newList = props.todoList.slice();\r\n        const item1 = newList[index1];\r\n        const item2 = newList[index2];\r\n        newList[index1] = item2;\r\n        newList[index2] = item1;\r\n\r\n        return newList;\r\n    }\r\n\r\n    const allowDrop = (event) => {\r\n        event.preventDefault();\r\n    }\r\n      \r\n    const drag = (event) => {\r\n        event.dataTransfer.setData(\"text\", event.target.id);\r\n    }\r\n      \r\n    const drop = (event) => {\r\n        event.preventDefault();\r\n        const index1 = findIndex(event.dataTransfer.getData(\"text\"));\r\n        const index2 = findIndex(props.listItem.id.toString());\r\n        const newList = swap(index1, index2);\r\n        \r\n        props.update(newList);\r\n    }\r\n\r\n    return(\r\n        <div className=\"itemContainer\">\r\n            <div id={props.listItem.id} className=\"listItem\" draggable=\"true\" onDragStart={drag} onDragOver={allowDrop} onDrop={drop}>\r\n                <ShiftButtons findIndex={findIndex} swap={swap} update={props.update} listItem={props.listItem} todoList={props.todoList}/>\r\n                <CheckBox update={props.update} findIndex={findIndex} todoList={props.todoList} listItem={props.listItem}/>\r\n                <div className=\"listContainer\">\r\n                    {!props.listItem.complete ? <p>{props.listItem.task}</p> : <s><p className=\"strikeText\">{props.listItem.task}</p></s>}\r\n                </div>\r\n                <DeleteButton findIndex={findIndex} update={props.update} todoList={props.todoList} listItem={props.listItem}/>\r\n            </div>\r\n            <div className=\"date\">\r\n                <p>Date Created: {props.listItem.date}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nListItem.propTypes = {\r\n    update: PropTypes.func.isRequired,\r\n    todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    listItem: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './ListItem';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\nfunction DisplayList(props) {\r\n    const pushItems = (todoList) => {\r\n        const listItems = todoList.map((item) => {\r\n            return(<ListItem  key={item.id} listItem={item} update={props.update} todoList={props.todoList}/>);\r\n        });\r\n        return listItems;\r\n    }\r\n    \r\n    const list = pushItems(props.todoList);\r\n    let title;\r\n    list.length > 0 ? title = <h2>Task List</h2> : title = undefined;\r\n  \r\n    return(\r\n        <div className=\"container\">\r\n            {title}\r\n            {list}\r\n        </div>\r\n    );\r\n}\r\n\r\nDisplayList.propTypes = {\r\n    update: PropTypes.func.isRequired,\r\n    todoList: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default DisplayList;","import React, {Component} from 'react';\nimport './App.css';\nimport ItemForm from './components/ItemForm';\nimport DisplayList from './components/DisplayList';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {todoList: []}\n  }\n\n  update = (newList) => {\n    localStorage.setItem(\"ItemList\", JSON.stringify(newList));\n    this.setState({todoList: newList});\n  }\n\n  componentDidMount(){\n    const list = JSON.parse(localStorage.getItem(\"ItemList\"));\n    if(list != null)\n      this.setState({todoList: list});\n  }\n  \n  render() {\n    return(\n      <div>\n        <div className=\"toDo\">\n          <h1>Todo List Application</h1>\n          <ItemForm update={this.update} todoList={this.state.todoList}/>\n        </div>\n        <DisplayList todoList={this.state.todoList} update={this.update}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}